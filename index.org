# -*- mode: org; -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/readtheorg.css"/>

#+HTML_HEAD: <script type="text/javascript" src="assets/jquery-2.1.4.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="assets/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="assets/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="assets/readtheorg.js"></script>

#+TITLE: GeekPlux's Wiki
#+AUTHOR: GeekPlux
# #+DATE: 2015-11-28 02:07:42
#+EMAIL: geekplux@gmail.com
#+DESCRIPTION: GeekPlux's wiki
#+KEYWORDS: wiki geekplux developer development code skill programmer programming


#+BEGIN_CENTER

This document, my personal wiki which shares my skills mastered and knowledges learned, is built by org-mode with the [[https://github.com/fniessen/org-html-themes][ReadTheOrg]] theme. I used to organize my knowledges by Evernote or other mind management APP, until I met [[https://github.com/syl20bnr/spacemacs][Spacemacs]] and discovered the [[http://orgmode.org][Org mode]], life became more wonderful.

#+END_CENTER

* Programming

- [[http://coolshell.cn/articles/4990.html][程序员技术练级攻略]]

看看这篇文章的发布日期，再对比现在的技术潮流，就知道这篇文章还没有过时，所以按照这篇文章修炼是不会错的。
技术越学到最后越偏底层。

- [[http://blog.knownsec.com/Knownsec_RD_Checklist/v2.2.html][知道创宇研发技能表]]

** Code Game

-  [[http://www.codewars.com/][codewars]]
-  [[http://www.topcoder.com/][Top Coder]]
-  [[http://codetank.alloyteam.com/][codetank]]

* Web
-  [[https://developer.mozilla.org/zh-CN/learn#][学习如何制作网站]]
-  [[http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/][浏览器的工作原理]]
-  [[http://www.20thingsilearned.com/zh-CN][关于浏览器和网络的 20 项须知]]
-  [[http://ecomfe.duapp.com/][前端知识体系]]
-  [[https://developers.google.com/web/fundamentals/][Google Web Fundamentals]]
-  [[https://github.com/dypsilon/frontend-dev-bookmarks][一大波前端资源]]
-  [[http://coderlmn.github.io/code-standards/][前端代码规范 及 最佳实践]]

** HTML&CSS

- [[http://codeguide.bootcss.com/][编码规范 by @mdo]] - 编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范
- [[http://cssguidelin.es/][CSS Guidelines]] - High-level advice and guidelines for writing sane, manageable, scalable CSS
- [[http://nec.netease.com/][网易前端规范]] - 真心不错

*** Meta tag
`<meta>` 提供关于 HTML 文档的元数据。元数据不会显示在页面上，但对于浏览器、搜索引擎和其他 Web 服务都非常有用。

#+BEGIN_SRC html
申明编码
<meta charset='utf-8' />

优先使用 IE 最新版本和 Chrome
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<!-- 关于 X-UA-Compatible -->
<meta http-equiv="X-UA-Compatible" content="IE=6" ><!-- 使用 IE6 -->
<meta http-equiv="X-UA-Compatible" content="IE=7" ><!-- 使用 IE7 -->
<meta http-equiv="X-UA-Compatible" content="IE=8" ><!-- 使用 IE8 -->
#+END_SRC

有两个主要的属性可定义：

**** name
可自定义属性名，如：`<meta name="keywords" content="HTML,META">`

常见的`name`：

- keywords  关键词，方便人们和 SEO
- description
- author
- robots 搜索引擎的索引方式

***** viewport

viewport 应用于响应式网站的开发

#+BEGIN_SRC html
<meta name="viewport" content="width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no"/>
#+END_SRC

- width：宽度（数值 / device-width）（范围从 200 到 10,000，默认为 980 像素）
- height：高度（数值 / device-height）（范围从 223 到 10,000）
- initial-scale：初始的缩放比例 （范围从>0 到 10）
- minimum-scale：允许用户缩放到的最小比例
- maximum-scale：允许用户缩放到的最大比例
- user-scalable：用户是否可以手动缩 (no,yes)
- minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）

注意，很多人使用 initial-scale=1 到非响应式网站上，这会让网站以 100%宽度渲染，用户需要手动移动页面或者缩放。如果和 initial-scale=1 同时使用 user-scalable=no 或 maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。

**** http-equiv
服务器在收发文档时的属性/值

虽然有些服务器会发送许多这种名称/值对，但是所有服务器都至少要发送一个：content-type:text/html。这将告诉浏览器准备接受一个 HTML 文档。

使用带有 http-equiv 属性的 <meta> 标签时，服务器将把名称/值对添加到发送给浏览器的内容头部。例如，添加：

#+BEGIN_SRC html
<meta http-equiv="charset" content="iso-8859-1">
<meta http-equiv="expires" content="31 Dec 2008">
#+END_SRC

这样发送到浏览器的头部就应该包含：

#+BEGIN_EXAMPLE
content-type: text/html
charset:iso-8859-1
expires:31 Dec 2008
#+END_EXAMPLE

当然，只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。

*** 技巧：

-  [[http://www.ruanyifeng.com/blog/2010/03/css_cookbook.html][CSS 使用技巧]]
-  [[http://www.ruanyifeng.com/blog/2010/03/cross-browser_css3_features.html][CSS3 常用功能的写法]]
-  [[http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html][CSS 动画简介]]
-  [[http://www.ruanyifeng.com/blog/2009/03/css_selectors.html][CSS 选择器笔记]]

*** 学习 CSS：

-  [[http://zh.learnlayout.com/][学习 CSS 布局]]
-  [[http://www.w3school.com.cn/][w3school]]
-  [[http://www.csszengarden.com/tr/chinese/][CSS 禅意花园]]
-  [[http://css.yukir.net/][编写易于管理及维护的 CSS 指导纲要]]

*** 手册：

-  [[http://css.doyoe.com/][CSS 参考手册]]

** JavaScript
当年我是通过《Javascript DOM 编程艺术》入门的，非常基础，循序渐进，一天就能看完

-  [[http://javascript.ruanyifeng.com/][JavaScript 标准参考教程（alpha）]]
-  [[http://bonsaiden.github.io/JavaScript-Garden/zh/][JavaScript 秘密花园]]
-  [[http://ejohn.org/apps/learn/][Learning Advanced JavaScript]]
-  [[http://eloquentjavascript.net/2nd_edition/preview/][Eloquent JavaScript]]
-  [[http://speakingjs.com/es5/index.html][Speaking JavaScript]]
-  [[http://lab.abhinayrathore.com/jquery-standards/][jQuery Coding Standards & Best Practices]]
-  [[http://www.keyframesandcode.com/resources/javascript/deconstructed/jquery/][jQuery Deconstructed]]
-  [[http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html][深入理解 JavaScript 系列]]
-  [[http://es6.ruanyifeng.com/][ECMAScript 6 入门]]

** CoffeeScript
CoffeeScript 作为一个可编译为 JS 的语言，在 ES2015 发布的时候就完成了它的历史使命。虽然我推荐在项目中直接用 ES2015，不过多了解一下 CoffeeScript 还是不错的。

-  [[http://island205.github.io/tlboc/][CoffeeScript 中文手册]]
-  [[http://island205.github.io/coffeescript-cookbook.github.com/][CoffeeScript Cookbook]]
-  [[https://github.com/geekplux/coffeescript-style-guide][CoffeeScript 最佳实践和编码惯例]]
-  [[http://autotelicum.github.io/Smooth-CoffeeScript/][Smooth CoffeeScript]]

** Angular
如果用了 Angular，那么你的代码和项目规划就必须「Angular 化」。

要尽可能的符合 Angular 的实践方案，表面上 AMD 规范非常好用，其实存在很多弊端。比如你用一个不符合 AMD 规范的库，得先封装成一个 Angular Module
Data-Binding 同样是有利有弊，不过这个还算可以避免。
但 Angular 总是有些小坑。。（不是黑）

*** ui-router
Angular 本身的 Router 还好，但是 ui-router 用 state 方式来管理路由更加方便

ui-router 的 url 设计，最好和后台 API 接口统一。如果是 RESTful 的接口，则更加直观和方便。
*** Controller 之间通信
- 不习惯用 RootScope，把要变的东西绑在全局变量上总不是什么好事
- 习惯用事件来传递数据。=$emit, $broadcast, $watch=
- 特殊情况用 Service
** Backbone
和 CoffeeScript 是同一个作者，代码总共 1000 多行，非常简洁优美。典型的 MVC 框架，其实通过 Backbone 就可以实现 Web Components。

collecction 和 model 非常好用。但由于过于轻量，很多东西需要自己来写，不过对于喜欢自己动手或喜欢「按需」搭配所需要功能的同学非常方便。
** Vue
半小时入门，可以做出实际应用。结合了 Angular 和 React 两者的优点，写起来非常漂亮。
** React
** Node

- [[http://www.nodebeginner.org/index-zh-cn.html][Node 入门]]
- [[http://nqdeng.github.io/7-days-nodejs/][七天学会 NodeJS]]
- [[https://github.com/alsotang/node-lessons][Node.js 包教不包会]]
- [[http://nodeapi.ucdok.com/#/api/][Node.js API 中文版]]
- [[http://nodeschool.io/][nodeschool]]
- [[http://0532.gitbooks.io/nodejs/][the NodeJS]] - 一本关于 nodejs 的文档
- [[http://blog.fens.me/series-nodejs/][从零开始 nodejs 系列文章]]

** Web Tools

-  [[http://jsfiddle.net/][JSFiddle]] - 在线展示 Web 代码效果
-  [[http://codepen.io/][CodePen]] - 同上
-  [[http://tool.lu/][iBox]] - 一系列在线小工具
-  [[http://lab.maltewassermann.com/viewport-resizer/][VIEWPORT RESIZER]] - 响应式开发测试

*** JavaScript

-  [[http://js2coffee.org/][Js2coffee]] - JS 转换为 CoffeeScript
-  [[http://www.jshint.com/][JSHint]]
-  [[http://www.jslint.com/][JSLint]]
-  [[https://www.codefellows.org/blogs/complete-list-of-javascript-tools][A List of Foundational JavaScript Tools]]

*** CSS

-  [[http://csslint.net/][CSS Lint]]
-  [[https://github.com/tkadauke/css_doc][css\_doc]] 写注释用
-  [[https://github.com/kneath/kss][kss]] 写注释用
-  [[http://www.getmarkman.com/][马克鳗]] - 高效的设计稿标注、测量工具

--------------

* Android
当年我开发 Android 的时候，还没有统一的设计规范，设备的屏幕也是大小不一很难适配。开发环境还是 Eclipse+Android SDK，看到现在完备的开发工具真是羡慕。

-  [[http://developer.android.com/index.html][Android Developers]]
-  [[http://www.androidviews.net/][AndroidViews]]
-  [[http://www.apkbus.com/design/index.html][Android Design]]

* Python
Python 我个人觉得有两大方向，一是 Web 方面，一是科研方面。

Web 方面有 Flask, Django 等成熟的框架。
科研方面有很多完备的科学计算库和绘图工具：

[[http://www.rafekettler.com/magicmethods.html?utm_campaign=CodeTengu&utm_medium=email&utm_source=CodeTengu_18][A Guide to Python's Magic Methods « rafekettler.com]]

- Numpy
  学习资源：[[http://www.labri.fr/perso/nrougier/teaching/numpy/numpy.html][Numpy tutorial]]
- Matplotlib
  学习资源：[[http://www.labri.fr/perso/nrougier/teaching/matplotlib/][Matplotlib tutorial]]

* Ruby

-  [[http://saito.im/slide/ruby-new.html][Ruby 语言新手教程]]
-  [[https://ihower.tw/rails4/index.html][Ruby on Rails 實戰聖經]]
-  [[http://guides.ruby-china.org][Ruby on Rails 指南]]

* Shell
-  [[https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md][命令行的艺术]]
* PHP

-  [[http://wulijun.github.io/php-the-right-way/][PHP 之道]]
-  [[http://www.php.net/manual/zh/][PHP 手册]]
-  [[https://phpbestpractices.org/][PHP Best Practices]]
-  [[http://phpbestpractices.justjavac.com/][PHP 最佳实践（译）]]

* Git

多人协作的时候要商定协作流程。[[http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html][git-flow]] 是个不错的实践。

如何使用 github：
[[http://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/][The beginner's guide to contributing to a GitHub project]]

学习资源：

-  [[http://rogerdudler.github.io/git-guide/index.zh.html][git - 简明指南]] - 助你入门 git 的简明指南，木有高深内容 ;)
-  [[http://git-scm.com/book/zh/v1][pro git（中文版）]]
-  [[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000][Git 教程]]
-  [[http://gitref.org/zh/index.html][Git 参考手册]]
-  [[http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/][Git 指南]]
-  [[http://pcottle.github.io/learnGitBranching/][Learn Git Branching]]

* Vim

《Practice Vim》是一本非常棒的书，以下几个命令是从中学到的基本技巧：

#+BEGIN_EXAMPLE

    % 在对应括号跳转
    :s/old/new 替换
    c change
    A 直接到行尾
    s 修改
    * 搜索
    . 重复上一条命令
    >G 缩进一格
    q 记录宏
    @ 提取宏

#+END_EXAMPLE

Vim 的宏在进行批量修改时，是神器

一些资源：

-  [[http://coolshell.cn/articles/5426.html][简明 Vim 练级攻略]]
-  [[http://learnvimscriptthehardway.onefloweroneworld.com/][笨方法学 Vimscript]]
-  [[http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim?page=1&tab=votes#tab-top][What is your most productive shortcut with Vim?]]
-  [[http://vimawesome.com/][Vim Awesome]] - a directory of Vim plugins sourced from GitHub
-  [[https://github.com/wklken/k-vim][vim 推荐配置]]

* Spacemacs

[[https://github.com/syl20bnr/spacemacs][spacemacs]] 是一款社区维护的 Emacs 配置，结合了 vim 和 Emacs 两者的优点。

安装 Spacemacs 可以直接 git clone Spacemacs 的 repo 到 Dropbox（或其他云盘）中，然后 ln -s 到 home 目录的 `.emacs.d` 文件夹下。此处可以选择用 master 还是 develop 分支。
然后新建 `.spacemacs` 文件夹，在.spacemacs 中的 init.el 为 Spacemacs 的启动配置文件（这个文件可自动生成，用 dotspacemacs/copy-template 命令），其余的配置写进自己的 layer 里。Layer 这个概念和 package 不一样，Spacemacs 基于 layer 来配置。

我个人的配置在 [[https://github.com/geekplux/dotfiles][dotfiles]] 这个库中，也可以参考子龙山人的[[https://github.com/zilongshanren/spacemacs-private][个人配置]]

** Shortcuts

#+BEGIN_EXAMPLE

C-h f & C-h C-f : Find Function definition
C-h v & C-h C-v : Find variable definition
SPC s l : Navigation functions in current file
SPC f e d : Go to your .spacemacs file
SPC f e i : Go to .emacs.d/init.el
SPC h L : Find an elpa library
SPC f e h : Find Spacemacs layers, docs and package configuration

SPC b b & SPC b B(i) : show all opened buffer
SPC b h : Open spacemacs home buffer
SPC b s : Open scratch buffer
SPC b f : Reveal in finder
SPC b w : Read only mode.
SPC b n/p : previous or next buffer
SPC b TAB : to switch back and forth.

SPC f f : hel:mfin:dfile
SPC f r : open recent file
SPC f R : rename file
SPC f c : copy file
SPC f j : jump to dired
SPC f t : open neo tree
SPC f o : open in external application

SPC p f / SPC p b : open project file or buffer
SPC p t : open project neotree

SPC l o : custom layout
SPC l L/s : load or save layout
SPC l l : switch bewteen layout
SPC l TAB : quick way to switch
SPC l ? : open up the help.
SPC p l : switch to project and create a layout

#+END_EXAMPLE

** Resources

Elisp 教程：
- [[http://learnxinyminutes.com/docs/elisp/][Learn elisp in Y minutes]]
- [[http://smacs.github.io/elisp/][Emacs Lisp 简明教程]]

一些相关网站：
- [[http://emacsist.com][Emacsist]]

* Org Mode

[[http://orgmode.org][Org mode]] is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.

- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]] -- 参考这份文档来配置

** useful package:
*** org-mac-link

*Installation*

Customize the org group by typing M-x customize-group RET org RET, then expand the Modules section, and enable mac-link.

You may also optionally bind a key to activate the link grabber menu, like this:


#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook (lambda ()
  (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)))

#+END_SRC

*** Org-IO Slide
[[https://github.com/coldnew/org-ioslide][coldnew/org-ioslide]]

* Sublime Text

Material Theme 比 Monokai 更好看。。

-  [[http://zh.lucida.me/blog/sublime-text-complete-guide/][Sublime Text 全程指南]]
-  [[http://feliving.github.io/Sublime-Text-3-Documentation/][Sublime Text 3 文档]]
-  [[http://docs.sublimetext.tw/][Sublime Text 手冊]]

* Chrome

Chrome develop tool 有很多小技巧，之后整理一下

-  [[https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh][cVim]]
-  [[http://markdown-here.com/][Markdown Here]]
-  [[https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall][One Tab]]
-  [[https://chrome.google.com/webstore/detail/new-tong-wen-tang/ldmgbgaoglmaiblpnphffibpbfchjaeg][新同文堂]] - 繁简转换

* Linux

- [[http://vbird.dic.ksu.edu.tw/][鸟哥的 Linux 私房菜]]
- [[http://hyperpolyglot.org/unix-shells#top][Unix Shells: Bash, Fish, Ksh, Tcsh, Zsh]]
- [[http://www.commandlinefu.com/commands/browse][命令大全（commandlinefu）]]
- [[http://linux.chinaitlab.com/special/linuxcom/Index.html][常用命令全集（chinaitlab）]]
- [[http://www.waterlab.cn/hpc/upload/2010/6/LinuxCommand.pdf][常用命令]]
* OS X

-  [[http://www.alfredapp.com/][Alfred]] - 替换系统 Spotlight 的免费软件，更美观更强大
-  [[http://www.alfredworkflow.com/][alfredworkflow]] - 超多的 alfredworkflow
-  [[http://www.dropbox.com][Dropbox]] - 文件同步工具
-  [[http://www.google.cn/Chrome][Chrome]] - 跨平台可替代 safari
-  [[http://brew.sh/][Homebrew]] - 软件包管理工具
-  [[https://github.com/phinze/homebrew-cask][homebrew-cask]] - 使用命令行方式安装软件
-  [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]] - zsh 的安装配置文件
-  [[http://www.trankynam.com/xtrafinder/][XtraFinder]] - 文件管理器
-  [[http://mplayerx.org/][MplayerX]] - 强大的视频播放器
-  [[https://github.com/gnachman/iTerm2][iTerm2]] - 第三方终端
-  [[http://mouapp.com/][Mou]] - Markdown 写作工具
-  [[http://justgetflux.com/][F.liux]] - 护眼
-  [[https://www.yinxiang.com/?from=evernote][Evernote]] - 个人知识管理

* Windows
-  [[http://typeof.net/c/cn-scott-hanselmans-2014-ultimate-developer-and-power-user-s-tool-list-for-windows.html][2014 年软件推荐]] - 写的太全了
* Redis

推荐《Redis 入门指南》一书入门。

Redis 是一个开源、高性能、基于键值对的缓存与存储系统，通过提供多种键值数据类型来适应不同场景下的缓存与存储需求。

** 数据类型
不论何种数据类型，它的字段值都只能为字符串类型。
*** 字符串类型
一般实践以=对象类型.对象 ID.对象属性=命名
*** 散列类型
适合存储的对象：使用对象类别和 ID 构成键名，使用字段表示对象的属性，而字段值则存储属性值
*** 列表类型
可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素，或者获得列表的某一个片段。

列表类型内部是使用双向链表（double linked list）实现的，所以向两端添加元素很快，时间复杂度为 O(1)。但通过索引来访问元素比较慢。

所以适合获取最新内容或两端插入内容的场景
*** 集合类型
最常用的操作是向集合中加入或删除元素，判断是否存在等。可以方便的和多个集合间进行并集、交集、差集的计算。
*** 有序集合类型
比集合类型多了一个「分数」，所以有序。

- 有序集合是使用散列表和跳跃表实现的，所以读取位于中间部分的数据也很快，时间复杂度是 O(log(N))
- 可通过调整「分数」来调整元素的位置
- 比列表类型更耗内存
** 技巧
*** 删除键技巧
=DEL key [key...]=

del 命令不支持通配符，但我们可以结合 Linux 的管道和 xargs 命令自己实现删除所有符合规则的键。比如要删除所有以“user:”开头的键，就可以执行

#+BEGIN_EXAMPLE

redis-cli keys "user:*" | xargs redis-cli del

#+END_EXAMPLE

另外由于 del 命令支持多个键作为参数，所以还可以执行

#+BEGIN_EXAMPLE

redis-cli del `redis-cli keys "user:*"

#+END_EXAMPLE

来达到同样的效果，但是性能更好。
* Research
** Paper
[[https://github.com/papers-we-love/papers-we-love][papers-we-love/papers-we-love]]
* Link Prediction
** 概念
*** *网络*
描述某物与某物之间联系的一种方式。一般由点和边构成。
*** 如何刻画网络
图论
*** 两个节点间的距离
连接这两个节点的最短路径所包含的边的数目
*** 平均距离
公式 1
*** 度

- 无向图中：与节点相连的边的数目
- 有向图中：出度是从该节点指向其他节点的边的数目，入度与出度相反。

平均度：网络中所有节点的度的平均值
度分布：网络中度为 k 的节点数占节点总数的比例
*** 小世界效应
如果网络的平均度固定，平均距离随网络节点数以对数的速度或者慢于对数的速度增长
*** 无标度特性
很多真实网络的分布，都近似的遵从幂函数的形式
*** 局部结构
*** 节点与链路的中心性

度中心性：节点的度

- 一般而言，一个节点的度越大，则这个节点越重要
- 节点的传播影响力与其所处的网络的位置有关
- 节点的重要性与其网络的结构和功能有关

介数：用于衡量某节点在基于最短路径的路由策略下信息的吞吐量
介数中心性：网络中节点对最短路径中经过该节点的数目占所有最短路径数的比例
接近中心性：节点与网络中其他节点最短距离的平均值

其他还有：

- 特征向量中心性
- 路由中心性
- 子图中心性
- 环中心性

*** 群落结构
群落内部连边密集，群落之间连边很少
*** 关联性
一条边所连接的两个节点度之间的关联

- 正相关：度大的节点倾向于和度小的节点相连
- 负相关：度大的节点倾向于和度小的节点相连
*** 熵

** 图的类型

- 加权有向图
- 加权无向图
- 无权有向图
- 无权无向图（简单图）

** 基本的网络模型
*** 规则网络
定义：每个节点的度都相同
*** 随机网络
两点之间的连边与否根据概率得出
*** 小世界网络
*** 无标度网络
** 链路预测的基本方法
*** 概念
定义：指如何通过已知的网络节点以及网络结构等信息，预测网络中尚未产生连边的两个节点之间产生连接的可能性。这种预测包含了对未知链接（在网络中实际存在但未被探测到）和未来链接的预测
*** 方法
为每对没有连边的节点赋予一个分数值，再将已知的连边分为两部分：训练集和测试集。最后通过算法算出分数值再进行排序，如果测试集中的边更多的排在前面，则算法越精确
**** 数据集划分方法
- 随机抽样
- 逐项遍历
- k-折叠交叉检验
- 滚雪球抽样
- 熟识者抽样
- 随机游走抽样
- 基于路径抽样
**** 评价指标
- Precision
- AUC
- Ranking Score
**** 算法
- CN
- AA
- RA
- PA
* 日本语学习

日语由两部分构成：假名、真名（汉字）
假名又有两部分构成：平假名、片假名

平假名是由汉字草书简化演变而来，平时用的最多
片假名的发音和平假名一一对应，由汉字楷体偏旁演化而来，但是字形相对简单，主要用于：外来语、动植物、拟声词

还有一类：罗马字，即用英文表达日语发音

学习书目：

- 《别笑，我是日语学习书》
- 《我的第一本日语学习书》

* Life
** Music

由于版权的问题，国内的软件现在很多曲库都不太全了
iTunes 还不错，唯一缺点是通过 iCloud 同步 My Music 较慢

- [[http://music.163.com][网易云音乐]]
- [[http://www.xiami.com/][虾米]]
- [[http://ll.geli.org/user/login][Listen Later]]
- [[http://www.luoo.net/][落网]]
** Podcast
IT 类：

- 内核恐慌
- IT 公论
- teahour.FM

其余的：

- 聆听古典
** Download Resources
- [[http://www.torrentkitty.com/][Torrent Kitty]]
** 科学上网
- [[https://code.google.com/p/smartladder/][聪明的梯子]]
- [[http://www.shadowsocks.com/][Shadowsocks]]

** Job

- [[http://resume.github.io/][Github 简历生成]]
- [[https://cvmkr.com/][简历生成]]
- [[http://jianlidachu.com/welcome/][简历大厨]]
- [[https://github.com/geekcompany/ResumeSample][Resume template for Chinese programmers]]
- [[https://github.com/geekcompany/DeerResume][最好用的 MarkDown 在线简历工具]] - 可在线预览、编辑、设置访问密码和生成 PDF
** 白噪音

在线版：

- [[http://www.calm.com/][白噪音]]
- [[http://www.rainymood.com/][白噪音]]

Mac 上有款软件也非常好用：

- Noizio
** 在线编辑器

-  [[http://www.zybuluo.com/mdeditor][Cmd Makrdown]]
-  [[http://benweet.github.io/stackedit/][StackEdit]]
-  [[http://notepad.cc][notepad.cc]] - 特别好用
-  [[https://www.office.com/start/default.aspx][Office Online]]
-  [[http://slid.es/][Slides]] - 制作在线 PPT
-  [[http://maxiang.info/][马克飞象]] - 一款专为印象笔记打造的 Markdown 编辑器

** 其他

-  [[http://zhihuhelpbyyzy.sinaapp.com/][知乎助手]]

* Reading

阅读工具：

Kindle 的墨水屏确实很舒服，但感觉没 iPad Mini 看书爽，尤其是 PDF。
我一直用=多看阅读=来看书，因为在上面买了很多书，而且可以用 Evernote 同步笔记。

** 书籍资源

-  [[https://github.com/vhf/free-programming-books][List of Free Learning Resources]]
-  [[https://github.com/justjavac/free-programming-books-zh_CN][免费的编程中文书籍索引]]
-  [[http://www.v2ex.com/rework][Rework]]
-  [[http://www.ifindbook.net/][iFindBook]]
-  [[http://www.chm-pdf.com/][E 书家]]
-  [[http://www.wapm.cn/smart-questions/smart-questions-zh.html][提问的智慧]]

** Paper
- [[https://github.com/papers-we-love/papers-we-love][Paper we love]] -- Papers from the computer science community to read and discuss.
** News

-  [[https://news.ycombinator.com/][Hacker News]]
-  [[http://news.dbanotes.net/][Startup News]]

** 社区

-  [[http://www.v2ex.com/?r=Geeker][V2EX]]
-  [[http://ruby-china.org/][Ruby China]]
-  [[http://cnodejs.org/][CNode]]
-  [[http://www.zhihu.com/][知乎]]
-  [[http://dota.uuu9.com/][DOTA]]

** 必看的博客

-  [[http://mindhacks.cn/][刘未鹏 | MIND HACKS]]
-  [[http://www.ruanyifeng.com/home.html][Ruan YiFeng's Personal Website - 阮一峰的个人网站]]
-  [[http://tianchunbinghe.blog.163.com/][冰河]]
-  [[http://www.yangzhiping.com/][阳志平的个人网站]]
-  [[http://lixiaolai.com/][李笑来的博客]]
-  [[http://blog.xiqiao.info/][西乔的九卦]]
-  [[http://coolshell.cn/][酷壳 -- CoolShell]]
-  [[http://www.geekonomics10000.com/][学而时嘻之]] - 用理工科思维理解世界

** 我是死较真

-  [[http://www.guokr.com/][果壳]]
-  [[http://songshuhui.net/][科学松鼠会]]

** 已读书单

-  [[http://book.douban.com/people/44921319/collect][我的豆瓣已读书单]]
